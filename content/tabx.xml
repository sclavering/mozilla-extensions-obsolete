<?xml version="1.0"?>

<bindings id="tabx-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- The binding is to the <label> in the <tab>, not the <tab> itself, because binding
       to the latter does not work at all with the Pinstripe theme (since it uses its own
       binding).  The extends= is dubious, but necessary to make display= work.
       
       The close buttons are made to look like the one at the end of the tab bar by using
       the "tabs-closebutton" class, and the other class value is for use by themes. -->
  <binding id="tablabel" display="xul:hbox"
      extends="chrome://global/content/bindings/text.xml#text-label">
    <content>
      <xul:label class="tab-text-tabx" xbl:inherits="value,accesskey,crop,disabled" flex="1"/>
      <xul:image class="tabx-tab-close-button tabs-closebutton"/>
    </content>

    <implementation>
      <!-- Can't use a <handler> because it would never get called (unsure why not). -->
      <constructor>
      <![CDATA[
        var tab = this;
        while(tab.localName != "tab") tab = tab.parentNode;
        const img = document.getAnonymousNodes(this)[1];

        function handler(event) {
          // the <tab> is the originalTarget, so coordinate-based stuff seems like the only way
          const sx = event.screenX, sy = event.screenY;
          const box = img.boxObject;
          const x = box.screenX, y = box.screenY;
          if(sx < x || sy < y) return;
          // paranoia
          const x2 = x + box.width, y2 = y + box.height;
          if(sx > x2 || sy > y2) return;
          // now close the tab
          event.stopPropagation(); // don't want a tab switch to happen too
          gBrowser.removeTab(tab); // gBrowser is the <tabbrowser>, per browser.js
        };
        
        tab.addEventListener("click", handler, true);
      ]]>
      </constructor>
    </implementation>

  </binding>
</bindings>
