<?xml version="1.0"?>

<?xml-stylesheet href="chrome://stopreload/skin/" type="text/css"?>

<!DOCTYPE overlay SYSTEM "chrome://stopreload/locale/">

<overlay id="stopreloadOverlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<toolbarpalette id="BrowserToolbarPalette">
  <toolbarbutton id="stopreload-button" class="toolbarbutton-1 stopreload-reload"
      oncommand="stopreload.oncommand(event, this);"
      label="&default.label;"
      reloadlabel="&reload.label;" reloadtooltip="&reload.tooltip;"
      stoplabel="&stop.label;" stoptooltip="&stop.tooltip;"
      />
</toolbarpalette>

<script type="application/x-javascript"><![CDATA[

const kStopReloadNormalClass = "toolbarbutton-1 stopreload-reload";
const kStopReloadStopClass = "toolbarbutton-1 stopreload-stop";

window.addEventListener("load", function() {
  stopreload.init();

  var toolbox = document.getElementById("navigator-toolbox");
  toolbox.preStopreloadCustomizeDone = toolbox.customizeDone;
  toolbox.customizeDone = function(anythingChanged) {
    this.preStopreloadCustomizeDone(anythingChanged);
    if(anythingChanged) stopreload.init();
  };
}, false);


var stopreload = {
  button: null,
  listenerAdded: false,

  init: function() {
    this.button = document.getElementById('stopreload-button');
    if(this.button) {
      if(this.listenerAdded) return;
      gBrowser.addProgressListener(this, Components.interfaces.nsIWebProgress.NOTIFY_STATE_ALL);
//      gBrowser.addProgressListener(this, Components.interfaces.nsIWebProgress.NOTIFY_ALL);
      this.listenerAdded = true;
      // default label is 'Stop/Reload', for when it's on the palette
      this.button.setAttribute('label', this.button.getAttribute('reloadlabel'));
      this.button.stopOnCommand = false;
    } else {
      if(!this.listenerAdded) return;
      gBrowser.removeProgressListener(this);
      this.listenerAdded = false;
    }
  },

  oncommand: function(evt, button) {
    if(button.stopOnCommand) BrowserStop();
    else if(evt.shiftKey) BrowserReloadSkipCache();
    else BrowserReload();
  },

  QueryInterface: function(aIID) {
    if(aIID.equals(Components.interfaces.nsIWebProgressListener)
        || aIID.equals(Components.interfaces.nsISupports))
      return this;
    throw Components.results.NS_NOINTERFACE;
  },

  onStateChange: function(aWebProgress, aRequest, aStateFlags, aStatus) {
    const nsIWebProgressListener = Components.interfaces.nsIWebProgressListener;
    var btn = this.button;
    if(aStateFlags & nsIWebProgressListener.STATE_START) {
      btn.className = kStopReloadStopClass;
      btn.stopOnCommand = true;
      btn.setAttribute('label', btn.getAttribute('stoplabel'));
      btn.setAttribute('tooltiptext',btn.getAttribute('stoptooltip'));
    } else if(aStateFlags & nsIWebProgressListener.STATE_STOP) {
      btn.className = kStopReloadNormalClass;
      btn.stopOnCommand = false;
      btn.setAttribute('label', btn.getAttribute('reloadlabel'));
      btn.setAttribute('tooltiptext', btn.getAttribute('reloadtooltip'));
    }
  },

  onProgressChange: function(aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress) {},
  onLocationChange: function(aWebProgress, aRequest, aLocation) {},
  onStatusChange: function(aWebProgress, aRequest, aStatus, aMessage) {},
  onSecurityChange: function(aWebProgress, aRequest, aState) {},

  // tabbrowser.xml calls this for all registered progress listeners,
  // even though it is not part of the nsIWebProgressListener interface
  onLinkIconAvailable: function(href) {}
}

]]></script>

</overlay>
