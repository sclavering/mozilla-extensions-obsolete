<?xml version="1.0"?>

<overlay id="linkitOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/x-javascript"><![CDATA[

const linkitRE_next  = /^next|continue|next$|>$|\u00bb/i;
const linkitRE_prev  = /^prev|prev$|previous$|^back|\bback$|^<|\u00ab/i;
const linkitRE_first = /^first|first$|^begin|\|</i; // ? >\u007c| ?
const linkitRE_last  = /^last|last$|^end|>\|/i; // ? >\u007c| ?
const linkitRE_next2 = /next/i;
const linkitRE_prev2 = /prev/i;

// recursively ding the internal text of an element
function linkit_getInnerText(el) {
  // use alt text for images
  if(el.nodeName.toLowerCase() == "img") {
    // should this have spaces wrapped round it?
    s = el.getAttribute("alt");
    // hacky test of image src url because authors don't use alt :(
    var src = el.getAttribute("src");
    if(linkitRE_next2.test(src)) s += " next";
    else if(linkitRE_prev2.test(src)) s += " prev";
    return s;
  }
  // deal with other elements
  var s = "", kids = el.childNodes;
  for(var i = 0; i < kids.length; i++) {
    // add contents of CDATA or text nodes
    if(kids[i].nodeType==3 || kids[i].nodeType==2) s += kids[i].nodeValue;
    // call recursively for elements
    else if(kids[i].nodeType==1) s += linkit_getInnerText(kids[i]);
  }
  return s;
}


function linkit(event) {
  var page = event.originalTarget;
  var hydra = page.getElementsByTagName("head");
  if(!hydra) return;
  hydra = hydra[0];
  var location = page.location.href;

  // prevent duplication, probably unnecessary
  if(page.xxLinkItDone) return;
  page.xxLinkItDone = true;

  // add a top link iff relevant
  if(/^[^\/]*?:\/\/.*\/.+/.test(location)) {
    linkit_addLink(page,hydra,"top","/");
    // add a . or .. link
    var matches = location.match(/(^.*\/)(.*)/);
    if(!matches) return;  // we're on an about:blank or something weird
    if(matches[2]!="" && !/(index|main)\.(html?|php3?)/i.test(matches[2]))
      linkit_addLink(page,hydra,"up",".")
    else if(matches[2]=="")
      linkit_addLink(page,hydra,"up","..")
  }

  // add prev/next links
  var instags = page.getElementsByTagName("a");
  if(!instags) return;

  for(var i = 0; i < instags.length; i++) {
    var instag = instags[i];
    var href = instag.getAttribute("href");

    // ignore non link <a>s, and internal links
    if(!href) continue; // || /^#/i.test(href)) continue;

    // lose odd whitespace - replace with ' '
    var iText = linkit_getInnerText(instag).replace(/\s+/g," ");

    if(linkitRE_prev.test(iText))
      linkit_addLink(page,hydra,"prev",href,"LinkIt [<] (" +href+ ")")
    else if(linkitRE_next.test(iText))
      linkit_addLink(page,hydra,"next",href,"LinkIt [>] (" +href+ ")");
    else if(linkitRE_first.test(iText))
      linkit_addLink(page,hydra,"first",href,"LinkIt [|<] (" +href+ ")");
    else if(linkitRE_last.test(iText))
      linkit_addLink(page,hydra,"last",href,"LinkIt [>|] (" +href+ ")");

/*    else if(/^[0-9]{1,}$/i.test(iText))
      linkit_addLink(page,hydra,"linkit",href,"LinkIt [" + iText + "] (" +href+ ")");*/
  }
}

/*
    switch (relAttribute.toLowerCase()) {
      case "start":
      case "top":
      case "origin":
        return "top";
      case "up":
      case "parent":
        return "up";
      case "begin":
      case "first":
        return "first";
      case "next":
      case "child":
        return "next";
      case "prev":
      case "previous":
        return "prev";
      case "end":
      case "last":
        return "last";
      case "author":
      case "made":
        return "author";
      case "contents":
      case "toc":
        return "toc";
      case "prefetch":
        return null;
      default:
        return relAttribute.toLowerCase();
    }
*/

function linkit_addLink(page,head,rel,url,title) {
  var link = page.createElement("link");
  link.setAttribute("href", url);
  link.setAttribute("id", "linkit-"+rel);
  link.setAttribute("rel", rel);
  if(title) link.setAttribute("title", title);
  else link.setAttribute("title", "LinkIt ["+url+"]");
  head.appendChild(link);
}


window.addEventListener("load",linkit_init,true);

function linkit_init() {
  window.removeEventListener("load",linkit_init,true);
  // this will hear "load" events even for background tabs, and the document
  // that has loaded can be retrieved via event.originalTarget
  document.getElementById("appcontent").addEventListener("load", linkit, true);
}

]]></script>

</overlay>
