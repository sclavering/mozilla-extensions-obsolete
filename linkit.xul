<?xml version="1.0"?>

<!DOCTYPE overlay [
<!ENTITY % brandDTD SYSTEM "chrome://global/locale/brand.dtd" >
%brandDTD;
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
%browserDTD;
]>

<overlay id="linkitOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<script type="application/x-javascript"><![CDATA[

const linkitRE_next  = /^next|continue\b|next$|^>$|\u00bb/i;
const linkitRE_prev  = /^prev(ious)?\b|prev$|previous$|^back|\bback$|^<$|\u00ab/i;
const linkitRE_first = /^first|first$|^begin|\|</i; // ? >\u007c| ?
const linkitRE_last  = /^last|last$|^end\b|>\|/i; // ? >\u007c| ?
const linkitRE_next2 = /next|fwd/i;
const linkitRE_prev2 = /p?rev/i;
const linkitREfirst2 = /first/i;
const linkitRE_last2 = /last/i;
const is_head = /head/i;
const img = /(gif|jp[e]?g|png)$/i;

// <
// need > and not >>
//      < and not <<
// >

// recursively ding the internal text of an element
function linkit_getInnerText(el) {
  // use alt text for images
  if(el.nodeName.toLowerCase() == "img") {
    // should this have spaces wrapped round it?
    s = el.getAttribute("alt");
    // hacky test of image src url because authors don't use alt :(
    var src = el.getAttribute("src");
    if(linkitRE_next2.test(src)) s += " next";
    else if(linkitRE_prev2.test(src)) s += " prev";
    else if(linkitREfirst2.test(src)) s += " first";
    else if(linkitRE_last2.test(src)) s += " last";
    return s;
  }
  // deal with other elements
  var s = "", kids = el.childNodes;
  for(var i = 0; i < kids.length; i++) {
    // add contents of CDATA or text nodes
    if(kids[i].nodeType==3 || kids[i].nodeType==2) s += kids[i].nodeValue;
    // call recursively for elements
    else if(kids[i].nodeType==1) s += linkit_getInnerText(kids[i]);
  }
  return s;
}


function linkit(event) {

  var page = event.originalTarget;
  var location = page.location.href;

  var corps = page.lastChild; // better than first

  dump('Linkit :: corps:' + corps.localName + '\n');

  var hydra = corps.firstChild;

  while(!is_head.test(hydra.localName)) hydra = hydra.nextSibling;

  dump('Linkit :: hydra:' + hydra.nodeName + '\n');

  if(img.test(location) && !is_head.test(hydra.nodeName)) { // for images that result in 404 html
    var tete = page.createElement('head');
    corps.appendChild(tete);
    dump('Linkit :: add Head\n');
    var hydra2 = hydra.nextSibling;
    hydra = hydra2;
  }
  else if(!is_head.test(hydra.nodeName)) {
    dump('Linkit :: ' + location + ' has got no head ...\n');
    return;
  }

  // prevent duplication, probably unnecessary
  if(page.xxLinkItDone) { dump('deja vu\n'); return };
  page.xxLinkItDone = true;

  // add a top link iff relevant
  if(/^[^\/]*?:\/\/.*\/.+/.test(location)) {
    linkit_addLink(page,hydra,'top','/');
    // add a . or .. link
    var matches = location.match(/(^.*\/)(.*)/);
    if(!matches) return;  // we're on an about:blank or something weird
    if(matches[2]!='' && !/(index|main)\.(html?|php3?)/i.test(matches[2]))
      linkit_addLink(page,hydra,'up','.');
    else if(matches[2]=='')
      linkit_addLink(page,hydra,'up','..');
  }
  else {
    dump('Linkit :: already /\n');
  }

  // add prev/next links
  var instags = page.getElementsByTagName("a");
  if(!instags) return;

  for(var i = 0; i < instags.length; i++) {
    var instag = instags[i];
    var href = instag.getAttribute("href");

    // ignore non link <a>s, and internal links
    if(!href || /^#/i.test(href)) continue;

    // lose odd whitespace - replace with ' '
    var iText = linkit_getInnerText(instag).replace(/\s+/g," ");
    var inText = instag.childNodes[0].nodeValue; // innerText nodeValue -> no properties
       // inText = inText.replace(/<[^<>]+>/g, '');*/
    var iTbit = '';

    if(inText != '') iTbit = "{" +inText+ "} ";

    if(linkitRE_prev.test(iText))
      linkit_addLink(page,hydra,"prev",href,"LinkIt [<] " +iTbit+ "(" +href+ ")")
    else if(linkitRE_next.test(iText))
      linkit_addLink(page,hydra,"next",href,"LinkIt [>] " +iTbit+ "(" +href+ ")");
    else if(linkitRE_first.test(iText))
      linkit_addLink(page,hydra,"first",href,"LinkIt [|<] (" +href+ ")");
    else if(linkitRE_last.test(iText))
      linkit_addLink(page,hydra,"last",href,"LinkIt [>|] (" +href+ ")");

/*    else if(/^[0-9]{1,}$/i.test(iText))
      linkit_addLink(page,hydra,"linkit",href,"LinkIt [" + iText + "] (" +href+ ")");*/
  }
}

/*
    switch (relAttribute.toLowerCase()) {
      case "start":
      case "top":
      case "origin":
        return "top";
      case "up":
      case "parent":
        return "up";
      case "begin":
      case "first":
        return "first";
      case "next":
      case "child":
        return "next";
      case "prev":
      case "previous":
        return "prev";
      case "end":
      case "last":
        return "last";
      case "author":
      case "made":
        return "author";
      case "contents":
      case "toc":
        return "toc";
      case "prefetch":
        return null;
      default:
        return relAttribute.toLowerCase();
    }
*/

 /* if (document.getElementById("linkit-"+rel) && document.getElementById("linkit-"+rel).href != url) {
    link.setAttribute("id", "linkit-"+rel+'2');
    head.appendChild(link);
    dump('Linkit :: add ' + rel + '2\n');
  }
  else */

 /*
  while(linktags[i].getAttribute('class') != "linkit-"+rel) {
    i++; dump('linktags[' + i + ']\n');
  }


  if(linktags[i].getAttribute('href') != url || i == linktags.length || )
    nodupes = true;
 */

// var linkitLinks = [];

 // if (!linktags || nodupes) {
//    if(linkitLinks[rel]) { dump('Linkit :: ' + rel + ' : deja vu\n'); return };
//     linkitLinks[rel] = true;
 // }

 /* var nodupes = false; */


function linkit_addLink(page,head,rel,url,title) {

  var link = page.createElement("link");
  if(!head) return;
  link.setAttribute("class", "linkit-"+rel);
  link.setAttribute("href", url);
  link.setAttribute("rel", rel);
  if(title) link.setAttribute("title", title);
  else link.setAttribute("title", "LinkIt ["+url+"]");

// if no link currently in head matches href and rel then add

  var linktags = page.getElementsByTagName("link");

  for(var i = 0; i < linktags.length; i++) {
    var linktag = linktags[i];
    var klass = linktag.getAttribute("class");
    var href = linktag.getAttribute("href");
    var rell = linktag.getAttribute("rel");

    if(rell == rel && href == url && klass == "linkit-"+rel)
      return;

  }

    head.appendChild(link);
    dump('Linkit :: add ' + rel + '\n');

}


function fiddle() {

 // var fred = document.getElementById('ctx-openlink');
 // if(!fred) {

  dump('Link Context Menu :: fiddling\n');

  var contextM = document.getElementById("contentAreaContextMenu");

  var ctxOlt = document.getElementById('context-openlinkintab').cloneNode(false);
      ctxOlt.id = 'cdn-contextOpenLinkInTab';

  var ctxOl = document.getElementById('context-openlink');

  contextM.insertBefore(ctxOlt, ctxOl);

  document.getElementById('context-openlinkintab').setAttribute('hidden', true);

 // }

}


window.addEventListener("load",linkit_init,false);

function linkit_init() {
  // this will hear "load" events even for background tabs, and the document
  // that has loaded can be retrieved via event.originalTarget
 // window.removeEventListener("load", linkit_init, false);
  document.getElementById("appcontent").addEventListener("load", linkit, true);
  dump("LinkIt :: I'm Listening\n");
 // document.getElementById("contentAreaContextMenu").addEventListener("popupshowing", fiddle, true);
}

]]></script>

</overlay>
